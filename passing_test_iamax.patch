diff --git a/deps/onemkl.cpp b/deps/onemkl.cpp
index a95b1bb..a5b806b 100644
--- a/deps/onemkl.cpp
+++ b/deps/onemkl.cpp
@@ -81,15 +81,29 @@ extern "C" int onemklZgemm(syclQueue_t device_queue, onemklTranspose transA,
     return 0;
 }
 
-extern "C" void onemklDamax(syclQueue_t device_queue, int64_t n, const double *x, int64_t incx, int64_t *result)
+extern "C" void* onemklMallocShared(size_t align, size_t size, syclDevice_t dev, syclContext_t ctx)
 {
-    //printf("Hello World\n\n");
-    printf("n %ld, incx %ld, x %p\n", n, incx, x);
-    int64_t r=0;
-    oneapi::mkl::blas::column_major::iamax(device_queue->val, n, x, incx, &r);
+    return sycl::malloc_shared(size, dev->val, ctx->val);
 }
-extern "C" void onemklSamax(syclQueue_t device_queue, int64_t n, const float  *x, int64_t incx, int64_t *result){
-    oneapi::mkl::blas::column_major::iamax(device_queue->val, n, x, incx, result);
+
+extern "C" void onemklDamax(syclQueue_t device_queue, syclDevice_t dev, syclContext_t ctx, 
+                            int64_t n, const double *x, int64_t incx, int64_t *result)
+{
+    // printf("Hello World\n\n");
+    // printf("n %ld, incx %ld, x %p\n", n, incx, x);
+    // int64_t r=0;
+    std::vector<sycl::event> dependencies;
+    auto result_p = sycl::malloc_shared<int64_t>(1, dev->val, ctx->val);
+    oneapi::mkl::blas::column_major::iamax(device_queue->val, n, x, incx, result_p, dependencies);
+    *result = *result_p;
+}
+extern "C" void onemklSamax(syclQueue_t device_queue, syclDevice_t dev, syclContext_t ctx, 
+                            int64_t n, const float  *x, int64_t incx, int64_t *result)
+{
+    std::vector<sycl::event> dependencies;
+    auto result_p = sycl::malloc_shared<int64_t>(1, dev->val, ctx->val);
+    oneapi::mkl::blas::column_major::iamax(device_queue->val, n, x, incx, result_p, dependencies);
+    *result = *result_p;
 }
 extern "C" void onemklZamax(syclQueue_t device_queue, int64_t n, const double _Complex *x, int64_t incx, int64_t *result){
     oneapi::mkl::blas::column_major::iamax(device_queue->val, n, reinterpret_cast<const std::complex<double> *>(x), incx, result);
diff --git a/deps/onemkl.h b/deps/onemkl.h
index 6004295..e63cca1 100644
--- a/deps/onemkl.h
+++ b/deps/onemkl.h
@@ -39,8 +39,11 @@ int onemklZgemm(syclQueue_t device_queue, onemklTranspose transA,
                 const double _Complex *B, int64_t ldb, double _Complex beta,
                 double _Complex *C, int64_t ldc);
 
-void onemklDamax(syclQueue_t device_queue, int64_t n, const double *x, int64_t incx, int64_t *result);
-void onemklSamax(syclQueue_t device_queue, int64_t n, const float  *x, int64_t incx, int64_t *result);
+void onemklDamax(syclQueue_t device_queue, syclDevice_t dev, syclContext_t ctx, 
+                            int64_t n, const double *x, int64_t incx, int64_t *result);
+// void onemklDamax(syclQueue_t device_queue, int64_t n, const double *x, int64_t incx, int64_t *result);
+void onemklSamax(syclQueue_t device_queue, syclDevice_t dev, syclContext_t ctx, int64_t n, const float  *x, int64_t incx, int64_t *result);
+// void onemklSamax(syclQueue_t device_queue, int64_t n, const float  *x, int64_t incx, int64_t *result);
 void onemklZamax(syclQueue_t device_queue, int64_t n, const double _Complex *x, int64_t incx, int64_t *result);
 void onemklCamax(syclQueue_t device_queue, int64_t n, const float _Complex *x, int64_t incx, int64_t *result);
 
diff --git a/lib/mkl/libonemkl.jl b/lib/mkl/libonemkl.jl
index ba5316f..d29225c 100644
--- a/lib/mkl/libonemkl.jl
+++ b/lib/mkl/libonemkl.jl
@@ -1,4 +1,5 @@
 using CEnum
+using oneAPI.SYCL: syclQueue_t, syclContext_t, syclDevice_t
 
 @cenum onemklTranspose::UInt32 begin
     ONEMKL_TRANSPOSE_NONTRANS = 0
@@ -42,8 +43,13 @@ function onemklZgemm(device_queue, transA, transB, m, n, k, alpha, A, lda, B, ld
                                     C::ZePtr{ComplexF64}, ldc::Int64)::Cint
 end
 
-function onemklSamax(device_queue, n, x, incx, result)
-    @ccall liboneapi_support.onemklSamax(device_queue::syclQueue_t, n::Int64,
+function onemklMallocShared(align, size, dev, ctx)
+    @ccall liboneapi_support.onemklMallocShared(align::Int64, size::Int64, dev::syclDevice_t,
+                             ctx::syclContext_t)::Ptr{Cvoid}
+end
+
+function onemklSamax(device_queue, device, context, n, x, incx, result)
+    @ccall liboneapi_support.onemklSamax(device_queue::syclQueue_t, device::syclDevice_t, context::syclContext_t, n::Int64,
                              x::ZePtr{Cfloat}, incx::Int64, result::RefOrZeRef{Int64})::Cvoid
 end
 
diff --git a/lib/mkl/wrappers.jl b/lib/mkl/wrappers.jl
index d655305..4e1a5eb 100644
--- a/lib/mkl/wrappers.jl
+++ b/lib/mkl/wrappers.jl
@@ -23,39 +23,45 @@ end
 
 ## iamax
 for (fname, elty) in
-    ((:onemklDamax,:Float64),
-     (:onemklSamax,:Float32),
-     (:onemklZamax,:ComplexF64),
-     (:onemklCamax,:ComplexF32))
+    (
+     (:onemklDamax,:Float64),
+     (:onemklSamax,:Float32)
+    # (:onemklZamax,:ComplexF64),
+    # (:onemklCamax,:ComplexF32)
+    )
     @eval begin
         function iamax(n::Integer, x::StridedArray{$elty})
             result = Ref{Clong}()
-            #result = StridedArray{oneArray(Int64)};
+            dev = device(x)
+            #@show(dev)
+            ctx = context(x)
+            #@show(ctx)
+            #result_p = onemklMallocShared(64, 8, sycl_device(dev), sycl_context(ctx, dev))
             n = length(x)
-            queue = global_queue(context(x), device(x))
-            $fname(sycl_queue(queue), n, x, stride(x, 1), result)
+            queue = global_queue(ctx, dev)
+            $fname(sycl_queue(queue), sycl_device(dev), sycl_context(ctx, dev), n, x, stride(x, 1), result)
             return result[]
         end
     end
 end
 
 ## iamin
-for (fname, elty) in
-    ((:onemklDamax,:Float64),
-     (:onemklSamax,:Float32),
-     (:onemklZamax,:ComplexF64),
-     (:onemklCamax,:ComplexF32))
-    @eval begin
-        function iamin(n::Integer, x::StridedArray{$elty})
-            result = Ref{Clong}()
-            #result = StridedArray{oneArray(Int64)};
-            n = length(x)
-            queue = global_queue(context(x), device(x))
-            $fname(sycl_queue(queue), n, x, stride(x, 1), result)
-            return result[]
-        end
-    end
-end
+#for (fname, elty) in
+#    ((:onemklDamin,:Float64),
+#     (:onemklSamin,:Float32),
+#     (:onemklZamin,:ComplexF64),
+#     (:onemklCamin,:ComplexF32))
+#    @eval begin
+#        function iamin(n::Integer, x::StridedArray{$elty})
+#            result = Ref{Clong}()
+#            #result = StridedArray{oneArray(Int64)};
+#            n = length(x)
+#            queue = global_queue(context(x), device(x))
+#            $fname(sycl_queue(queue), n, x, stride(x, 1), result)
+#            return result[]
+#        end
+#    end
+#end
 
 # level 3
 
diff --git a/test/onemkl.jl b/test/onemkl.jl
index e5dd231..3417dd0 100644
--- a/test/onemkl.jl
+++ b/test/onemkl.jl
@@ -5,6 +5,6 @@ using LinearAlgebra
 
 m = 20
 
-A = oneArray(rand(Float64, m))
-#maxVal = oneMKL.iamax(m, A)
-minVal = oneMKL.iamin(m, A)
\ No newline at end of file
+A = oneArray(rand(Float32, m))
+maxVal = oneMKL.iamax(m, A)
+#minVal = oneMKL.iamin(m, A)
\ No newline at end of file
